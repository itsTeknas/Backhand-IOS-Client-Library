#import <Foundation/Foundation.h>
#import "SWGAvailability.h"
#import "SWGChallenge.h"
#import "SWGClub.h"
#import "SWGEvent.h"
#import "SWGFeaturedPlayer.h"
#import "SWGGame.h"
#import "SWGNews.h"
#import "SWGScoreboard.h"
#import "SWGUrl.h"
#import "SWGUser.h"
#import "SWGApi.h"

/**
* Backhand Api
* Apis to access Backhand backend services
*
* OpenAPI spec version: 0.0.1
* Contact: sanket@blackcurrantapps.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface SWGUserApi: NSObject <SWGApi>

extern NSString* kSWGUserApiErrorDomain;
extern NSInteger kSWGUserApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(SWGApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Accept Challenge
/// 
///
/// @param challengeId 
/// 
///  code:200 message:"Challenge Accepted"
///
/// @return NSObject*
-(NSURLSessionTask*) acceptChallengePostWithChallengeId: (NSNumber*) challengeId
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// Add sport to user profile
/// 
///
/// @param sport Sport Enum
/// @param skillLevel 
/// @param favouritePlayer 
/// @param playingSince 
/// 
///  code:200 message:"Status Updated"
///
/// @return NSObject*
-(NSURLSessionTask*) addSportPostWithSport: (NSString*) sport
    skillLevel: (NSNumber*) skillLevel
    favouritePlayer: (NSString*) favouritePlayer
    playingSince: (NSNumber*) playingSince
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// Delete sport to user profile
/// 
///
/// @param sport Sport Enum
/// 
///  code:200 message:"Status Updated"
///
/// @return NSObject*
-(NSURLSessionTask*) deleteSportPostWithSport: (NSString*) sport
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// Invite user by email
/// 
///
/// @param email 
/// 
///  code:200 message:"Invite Sent"
///
/// @return NSObject*
-(NSURLSessionTask*) emailInvitePostWithEmail: (NSString*) email
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// Get featured players
/// get the availability for the next 10 days for the selected user
///
/// @param userId 
/// 
///  code:200 message:"Availability"
///
/// @return NSArray<SWGAvailability>*
-(NSURLSessionTask*) getAvailabilityGetWithUserId: (NSNumber*) userId
    completionHandler: (void (^)(NSArray<SWGAvailability>* output, NSError* error)) handler;


/// Get available users on a date
/// 
///
/// @param date DD/MM/YYYY
/// @param sport Sport Enum
/// @param city city filter (optional)
/// @param limit Limit the number of results (optional) (default to 50)
/// 
///  code:200 message:"List of Users"
///
/// @return NSArray<SWGUser>*
-(NSURLSessionTask*) getAvailableUsersGetWithDate: (NSString*) date
    sport: (NSString*) sport
    city: (NSString*) city
    limit: (NSNumber*) limit
    completionHandler: (void (^)(NSArray<SWGUser>* output, NSError* error)) handler;


/// Get challenge recommendations
/// 
///
/// @param sport Sport Enum (optional)
/// @param limit Limit the number of results (optional) (default to 50)
/// 
///  code:200 message:"List of Users"
///
/// @return NSArray<SWGUser>*
-(NSURLSessionTask*) getChallengeRecommendationsGetWithSport: (NSString*) sport
    limit: (NSNumber*) limit
    completionHandler: (void (^)(NSArray<SWGUser>* output, NSError* error)) handler;


/// Get List of Cities
/// Get list of clubs for user's city
///
/// 
///  code:200 message:"List of Cities"
///
/// @return NSArray<NSString*>*
-(NSURLSessionTask*) getCitiesGetWithCompletionHandler: 
    (void (^)(NSArray<NSString*>* output, NSError* error)) handler;


/// Get List of Clubs
/// Get list of clubs for user's city
///
/// @param searchString Search String (optional)
/// @param city City (optional)
/// @param locality Locality Search (optional)
/// @param sport Sport Enum (optional)
/// @param limit Limit the number of results (optional) (default to 50)
/// 
///  code:200 message:"List of Clubs"
///
/// @return NSArray<SWGClub>*
-(NSURLSessionTask*) getClubsGetWithSearchString: (NSString*) searchString
    city: (NSString*) city
    locality: (NSString*) locality
    sport: (NSString*) sport
    limit: (NSNumber*) limit
    completionHandler: (void (^)(NSArray<SWGClub>* output, NSError* error)) handler;


/// Get List of Events
/// Get list of events for a city
///
/// @param sport Sport Enum
/// @param city City
/// 
///  code:200 message:"List of Events"
///
/// @return NSArray<SWGEvent>*
-(NSURLSessionTask*) getEventsGetWithSport: (NSString*) sport
    city: (NSString*) city
    completionHandler: (void (^)(NSArray<SWGEvent>* output, NSError* error)) handler;


/// Get featured players
/// 
///
/// @param sport Sport Enum
/// 
///  code:200 message:"Player List"
///
/// @return NSArray<SWGFeaturedPlayer>*
-(NSURLSessionTask*) getFeaturedPlayersGetWithSport: (NSString*) sport
    completionHandler: (void (^)(NSArray<SWGFeaturedPlayer>* output, NSError* error)) handler;


/// Get challenges
/// A list of challenges
///
/// @param limit Limit the number of results (optional) (default to 50)
/// 
///  code:200 message:"List of Challenges"
///
/// @return NSArray<SWGChallenge>*
-(NSURLSessionTask*) getMyChallengesGetWithLimit: (NSNumber*) limit
    completionHandler: (void (^)(NSArray<SWGChallenge>* output, NSError* error)) handler;


/// Get news
/// 
///
/// @param sport Sport Enum
/// 
///  code:200 message:"Player List"
///
/// @return NSArray<SWGNews>*
-(NSURLSessionTask*) getNewsGetWithSport: (NSString*) sport
    completionHandler: (void (^)(NSArray<SWGNews>* output, NSError* error)) handler;


/// Get all pending games
/// A list of games that are validated by the opoonent.
///
/// @param sport Sport Enum (optional)
/// @param limit Limit the number of results (optional) (default to 50)
/// 
///  code:200 message:"Scoreboard per sport"
///
/// @return NSArray<SWGGame>*
-(NSURLSessionTask*) getPendingGamesGetWithSport: (NSString*) sport
    limit: (NSNumber*) limit
    completionHandler: (void (^)(NSArray<SWGGame>* output, NSError* error)) handler;


/// Get Scoreboard for a sport
/// A list of games that are validated by the opoonent.
///
/// @param sport Sport Enum
/// @param limit Limit the number of results (optional) (default to 50)
/// @param timeFilter time filter (optional)
/// 
///  code:200 message:"Scoreboard per sport"
///
/// @return SWGScoreboard*
-(NSURLSessionTask*) getScoreboardGetWithSport: (NSString*) sport
    limit: (NSNumber*) limit
    timeFilter: (NSString*) timeFilter
    completionHandler: (void (^)(SWGScoreboard* output, NSError* error)) handler;


/// Get Authenticated user's profile
/// 
///
/// 
///  code:200 message:"User's own profile"
///
/// @return SWGUser*
-(NSURLSessionTask*) getSelfProfileGetWithCompletionHandler: 
    (void (^)(SWGUser* output, NSError* error)) handler;


/// Get user profile
/// 
///
/// @param userId 
/// 
///  code:200 message:"User profile"
///
/// @return SWGUser*
-(NSURLSessionTask*) getUserPostWithUserId: (NSNumber*) userId
    completionHandler: (void (^)(SWGUser* output, NSError* error)) handler;


/// Mark Availability
/// 
///
/// @param date DD/MM/YYYY
/// @param time 24 Hrs format ex. 22:30
/// 
///  code:200 message:"Marked"
///
/// @return NSObject*
-(NSURLSessionTask*) markAvailabilityPostWithDate: (NSString*) date
    time: (NSString*) time
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// Challenge someone for a game
/// Create a new challenge and send a push notification to opponents.
///
/// @param gameSport 
/// @param gameType 
/// @param gameOppositionPlayer1 
/// @param gameChallengerPlayer2  (optional)
/// @param gameOppositionPlayer2  (optional)
/// 
///  code:200 message:"Challenge Created",
///  code:302 message:"Challenge Already exists"
///
/// @return SWGChallenge*
-(NSURLSessionTask*) newChallengePostWithGameSport: (NSString*) gameSport
    gameType: (NSString*) gameType
    gameOppositionPlayer1: (NSNumber*) gameOppositionPlayer1
    gameChallengerPlayer2: (NSNumber*) gameChallengerPlayer2
    gameOppositionPlayer2: (NSNumber*) gameOppositionPlayer2
    completionHandler: (void (^)(SWGChallenge* output, NSError* error)) handler;


/// Make a new game
/// Create a new game and send a push notification to opponents to verify the same.
///
/// @param gameSport 
/// @param gameType 
/// @param gameClub 
/// @param gameClubId 
/// @param gameChallengerScore 
/// @param gameOppositionScore 
/// @param gameOppositionPlayer1 
/// @param gameChallengerPlayer2  (optional)
/// @param gameOppositionPlayer2  (optional)
/// 
///  code:200 message:"Game Created"
///
/// @return SWGGame*
-(NSURLSessionTask*) newGamePostWithGameSport: (NSString*) gameSport
    gameType: (NSString*) gameType
    gameClub: (NSString*) gameClub
    gameClubId: (NSNumber*) gameClubId
    gameChallengerScore: (NSNumber*) gameChallengerScore
    gameOppositionScore: (NSNumber*) gameOppositionScore
    gameOppositionPlayer1: (NSNumber*) gameOppositionPlayer1
    gameChallengerPlayer2: (NSNumber*) gameChallengerPlayer2
    gameOppositionPlayer2: (NSNumber*) gameOppositionPlayer2
    completionHandler: (void (^)(SWGGame* output, NSError* error)) handler;


/// Push Notify User
/// 
///
/// @param userId 
/// @param chatUid 
/// @param message 
/// 
///  code:200 message:"Notification Sent"
///
/// @return NSObject*
-(NSURLSessionTask*) notifyNewMessagePostWithUserId: (NSNumber*) userId
    chatUid: (NSString*) chatUid
    message: (NSString*) message
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// pseudo signup user
/// Add user if it dosent exist. set user_is_real = false
///
/// @param firstName 
/// @param lastName 
/// @param gender 
/// 
///  code:200 message:"Pseudo User"
///
/// @return SWGUser*
-(NSURLSessionTask*) pseudoSignupUserPostWithFirstName: (NSString*) firstName
    lastName: (NSString*) lastName
    gender: (NSString*) gender
    completionHandler: (void (^)(SWGUser* output, NSError* error)) handler;


/// Reject Challenge
/// 
///
/// @param challengeId 
/// 
///  code:200 message:"Challenge Rejected"
///
/// @return NSObject*
-(NSURLSessionTask*) rejectChallengePostWithChallengeId: (NSNumber*) challengeId
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// Reject pending score
/// Validate the score entered by an opponent.
///
/// @param gameId 
/// 
///  code:200 message:"Game Rejected"
///
/// @return SWGGame*
-(NSURLSessionTask*) rejectGamePostWithGameId: (NSNumber*) gameId
    completionHandler: (void (^)(SWGGame* output, NSError* error)) handler;


/// Search Users
/// search users based on name / phone number / email / name / club
///
/// @param query Search based on name, email, phone number
/// @param sport Sport Enum (optional)
/// @param limit Limit the number of results (optional) (default to 50)
/// 
///  code:200 message:"List of Users"
///
/// @return NSArray<SWGUser>*
-(NSURLSessionTask*) searchUsersPostWithQuery: (NSString*) query
    sport: (NSString*) sport
    limit: (NSNumber*) limit
    completionHandler: (void (^)(NSArray<SWGUser>* output, NSError* error)) handler;


/// Share a game by email
/// 
///
/// @param gameId 
/// @param email  (optional)
/// 
///  code:200 message:"Game shared"
///
/// @return NSObject*
-(NSURLSessionTask*) shareGameEmailPostWithGameId: (NSNumber*) gameId
    email: (NSString*) email
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// Share a game by sms
/// 
///
/// @param gameId 
/// @param cell  (optional)
/// 
///  code:200 message:"Game shared"
///
/// @return NSObject*
-(NSURLSessionTask*) shareGameSmsPostWithGameId: (NSNumber*) gameId
    cell: (NSString*) cell
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// Invite user by sms
/// 
///
/// @param cell 
/// 
///  code:200 message:"Invite Sent"
///
/// @return NSObject*
-(NSURLSessionTask*) smsInvitePostWithCell: (NSString*) cell
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// suggest addition of a club
/// 
///
/// @param clubName 
/// @param clubAddress 
/// 
///  code:200 message:"Game shared"
///
/// @return NSObject*
-(NSURLSessionTask*) suggestClubAdditionPostWithClubName: (NSString*) clubName
    clubAddress: (NSString*) clubAddress
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// Update favourite player
/// 
///
/// @param sport Sport Enum
/// @param player 
/// 
///  code:200 message:"Favourite Player Updated"
///
/// @return NSObject*
-(NSURLSessionTask*) updateFavouritePlayerPostWithSport: (NSString*) sport
    player: (NSString*) player
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// Update FCM InstanceID
/// 
///
/// @param deviceType 
/// @param instanceId 
/// 
///  code:200 message:"Status Updated"
///
/// @return NSObject*
-(NSURLSessionTask*) updateFcmInstanceIdPostWithDeviceType: (NSString*) deviceType
    instanceId: (NSString*) instanceId
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// Update profile picture
/// 
///
/// @param file File to upload Accepted formats jpg,jpeg,png
/// 
///  code:200 message:"URL of the picture"
///
/// @return SWGUrl*
-(NSURLSessionTask*) updateProfilePicturePostWithFile: (NSURL*) file
    completionHandler: (void (^)(SWGUrl* output, NSError* error)) handler;


/// Update Profile
/// If the profilePic file is provided, we save it and update the profile pic link in the user profile. Also, all other provided fileds are updated.
///
/// @param mobileNumber 
/// @param birthDate format - DD/MM/YYYY
/// @param handedness 
/// @param city 
/// @param locality 
/// @param clubIds  (optional)
/// 
///  code:200 message:"Status Updated"
///
/// @return NSObject*
-(NSURLSessionTask*) updateProfilePostWithMobileNumber: (NSString*) mobileNumber
    birthDate: (NSString*) birthDate
    handedness: (NSString*) handedness
    city: (NSString*) city
    locality: (NSString*) locality
    clubIds: (NSString*) clubIds
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// Update status message
/// 
///
/// @param message New Status Message
/// 
///  code:200 message:"Status Updated"
///
/// @return NSObject*
-(NSURLSessionTask*) updateStatusMessagePostWithMessage: (NSString*) message
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// Verify pending score
/// Validate the score entered by an opponent.
///
/// @param gameId 
/// 
///  code:200 message:"Game Verified"
///
/// @return SWGGame*
-(NSURLSessionTask*) verifyGamePostWithGameId: (NSNumber*) gameId
    completionHandler: (void (^)(SWGGame* output, NSError* error)) handler;



@end
