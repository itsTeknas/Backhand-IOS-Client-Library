#import <Foundation/Foundation.h>
#import "SWGChallenge.h"
#import "SWGClub.h"
#import "SWGClubParticipants.h"
#import "SWGEvent.h"
#import "SWGEventParticipants.h"
#import "SWGGame.h"
#import "SWGUser.h"
#import "SWGApi.h"

/**
* Backhand Api
* Apis to access Backhand backend services
*
* OpenAPI spec version: 0.0.1
* Contact: sanket@blackcurrantapps.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface SWGUserApi: NSObject <SWGApi>

extern NSString* kSWGUserApiErrorDomain;
extern NSInteger kSWGUserApiMissingParamErrorCode;

+(instancetype) sharedAPI;

/// Edit Scores
/// Edit the scores and resubmit for validation form the other party
///
/// @param gameId 
/// @param gameChallengerScore 
/// @param gameOppositionScore 
///  code:200 message:"Game Verified"
/// @return SWGGame*
-(NSNumber*) editGamePostWithGameId: (NSNumber*) gameId
    gameChallengerScore: (NSNumber*) gameChallengerScore
    gameOppositionScore: (NSNumber*) gameOppositionScore
    completionHandler: (void (^)(SWGGame* output, NSError* error)) handler;

/// Get List of Clubs
/// Get list of clubs for a city
///
/// @param city City
///  code:200 message:"List of Clubs"
/// @return NSArray<SWGClub>*
-(NSNumber*) getClubsGetWithCity: (NSString*) city
    completionHandler: (void (^)(NSArray<SWGClub>* output, NSError* error)) handler;

/// Get Club Participants
/// Get the players for various sports within a club
///
/// @param clubId City
///  code:200 message:"Club Details"
/// @return SWGClubParticipants*
-(NSNumber*) getClubsParticipantsGetWithClubId: (NSNumber*) clubId
    completionHandler: (void (^)(SWGClubParticipants* output, NSError* error)) handler;

/// Get Event Participants
/// Get the players for various sports within a event
///
/// @param eventId Event ID
///  code:200 message:"Event Details"
/// @return SWGEventParticipants*
-(NSNumber*) getEventParticipantsGetWithEventId: (NSNumber*) eventId
    completionHandler: (void (^)(SWGEventParticipants* output, NSError* error)) handler;

/// Get List of Events
/// Get list of events for a city
///
/// @param city City
///  code:200 message:"List of Events"
/// @return NSArray<SWGEvent>*
-(NSNumber*) getEventsGetWithCity: (NSString*) city
    completionHandler: (void (^)(NSArray<SWGEvent>* output, NSError* error)) handler;

/// Get past games
/// A list of games that are not yet validated
///
/// @param clubId City (optional)
/// @param limit Limit the number of results (optional)
///  code:200 message:"List of Clubs"
/// @return NSArray<SWGChallenge>*
-(NSNumber*) getMyChallengesGetWithClubId: (NSNumber*) clubId
    limit: (NSNumber*) limit
    completionHandler: (void (^)(NSArray<SWGChallenge>* output, NSError* error)) handler;

/// Get past verified games
/// A list of games that are validated by the opoonent.
///
/// @param clubId City (optional)
/// @param limit Limit the number of results (optional)
///  code:200 message:"List of Clubs"
/// @return NSArray<SWGGame>*
-(NSNumber*) getMyGamesGetWithClubId: (NSNumber*) clubId
    limit: (NSNumber*) limit
    completionHandler: (void (^)(NSArray<SWGGame>* output, NSError* error)) handler;

/// Get Authenticated user's profile
///
///  code:200 message:"List of Clubs"
/// @return SWGUser*
-(NSNumber*) getSelfProfileGetWithCompletionHandler: 
    (void (^)(SWGUser* output, NSError* error)) handler;

/// Join an event
/// You become descoverable to other players who are also goint to that event.
///
/// @param eventId Event ID
///  code:200 message:"Joined Event"
-(NSNumber*) joinEventGetWithEventId: (NSNumber*) eventId
    completionHandler: (void (^)(NSError* error)) handler;

/// Challenge someone for a game
/// Create a new challenge and send a push notification to opponents.
///
/// @param gameSport 
/// @param gameType 
/// @param gameChallengerPlayer1 
/// @param gameOppositionPlayer1 
/// @param gameChallengerPlayer2  (optional)
/// @param gameOppositionPlayer2  (optional)
///  code:200 message:"Challenge Created"
/// @return SWGChallenge*
-(NSNumber*) newChallengePostWithGameSport: (NSString*) gameSport
    gameType: (NSString*) gameType
    gameChallengerPlayer1: (NSNumber*) gameChallengerPlayer1
    gameOppositionPlayer1: (NSNumber*) gameOppositionPlayer1
    gameChallengerPlayer2: (NSNumber*) gameChallengerPlayer2
    gameOppositionPlayer2: (NSNumber*) gameOppositionPlayer2
    completionHandler: (void (^)(SWGChallenge* output, NSError* error)) handler;

/// Make a new game
/// Create a new game and send a push notification to opponents to verify the same.
///
/// @param gameSport 
/// @param gameType 
/// @param gameChallengerScore 
/// @param gameOppositionScore 
/// @param gameChallengerPlayer1 
/// @param gameOppositionPlayer1 
/// @param gameScoreFormat  (optional)
/// @param gameChallengerPlayer2  (optional)
/// @param gameOppositionPlayer2  (optional)
///  code:200 message:"Game Created"
/// @return SWGGame*
-(NSNumber*) newGamePostWithGameSport: (NSString*) gameSport
    gameType: (NSString*) gameType
    gameChallengerScore: (NSNumber*) gameChallengerScore
    gameOppositionScore: (NSNumber*) gameOppositionScore
    gameChallengerPlayer1: (NSNumber*) gameChallengerPlayer1
    gameOppositionPlayer1: (NSNumber*) gameOppositionPlayer1
    gameScoreFormat: (NSString*) gameScoreFormat
    gameChallengerPlayer2: (NSNumber*) gameChallengerPlayer2
    gameOppositionPlayer2: (NSNumber*) gameOppositionPlayer2
    completionHandler: (void (^)(SWGGame* output, NSError* error)) handler;

/// Update Profile
/// If the profilePic file is provided, we save it and update the profile pic link in the user profile. Also, all other provided fileds are updated.
///
/// @param mobileNumber 
/// @param birthDate format - DD/MM/YYYY
/// @param playsBadminton 
/// @param playsTennis 
/// @param playsSquash 
/// @param handedness 
/// @param city 
/// @param clubIds 
/// @param profilePic The jpeg file to be uploaded (optional)
///  code:200 message:"Profile updated"
-(NSNumber*) updateProfilePostWithMobileNumber: (NSString*) mobileNumber
    birthDate: (NSString*) birthDate
    playsBadminton: (NSNumber*) playsBadminton
    playsTennis: (NSNumber*) playsTennis
    playsSquash: (NSNumber*) playsSquash
    handedness: (NSString*) handedness
    city: (NSString*) city
    clubIds: (NSArray<NSNumber*>*) clubIds
    profilePic: (NSURL*) profilePic
    completionHandler: (void (^)(NSError* error)) handler;

/// Verify the score
/// Validate the score entered by an opponent.
///
/// @param gameId 
///  code:200 message:"Game Verified"
/// @return SWGGame*
-(NSNumber*) verifyGamePostWithGameId: (NSNumber*) gameId
    completionHandler: (void (^)(SWGGame* output, NSError* error)) handler;


@end
